Web Services
============

Fixity
------

Tools
+++++

* Python Hashlib Library https://docs.python.org/3/library/hashlib.html
* BagIt Python Validation https://github.com/LibraryOfCongress/bagit-python#validation

PresQT Supported Hash Algorithms
++++++++++++++++++++++++++++++++

The following is a master list of hash algorithms that are both supported by a target and supported
by Python's HashLib library:

* sha256
* md5

Each individual target's supported hash algorithms can be found in presqt/targets.json

Resource Download Fixity
++++++++++++++++++++++++

Fixity is checked during ``Resource Download`` by comparing the file hashes provided by the source target
with hashes that are generated after files are downloaded on to the server. If the provided hash and the
calculated hash match then fixity passes!

The download function will try and find a matching hash algorithm between the source target supported algorithms and
algorithms supported by the Python Hashlib library to use when generating hashes for files downloaded to the server.
If no hash algorithms match or if the source target does not provide file hashes then ``md5`` is uses as a default.
It also counts this situation as fixity passing since we didn't know what the original hash was.

**Valid Hashes Provided + Fixity Passes Example**:

.. code-block:: json

    {
        "sha256": "343e249fdb0818a58edcc64663e1eb116843b4e1c4e74790ff331628593c02be",
        "md5": "a4536efb47b26eaf509edfdaca442037"
    }

    will yield

    {
        'hash_algorithm': sha256,
        'given_hash': 343e249fdb0818a58edcc64663e1eb116843b4e1c4e74790ff331628593c02be,
        'calculated_hash': 343e249fdb0818a58edcc64663e1eb116843b4e1c4e74790ff331628593c02be,
        'fixity': True
    }

**Valid Hashes Provided + Fixity Fails Example**:

.. code-block:: json

    {
        "sha256": "343e249fdb0818a58edcc64663e1eb116843b4e1c4e74790ff331628593c02be",
        "md5": "a4536efb47b26eaf509edfdaca442037"
    }

    will yield

    {
        'hash_algorithm': sha256,
        'given_hash': 343e249fdb0818a58edcc64663e1eb116843b4e1c4e74790ff331628593c02be,
        'calculated_hash': 12345678,
        'fixity': False
    }

**Blank Hashes Provided Example**:

.. code-block:: json

    {
        "sha256": None,
        "md5": None
    }

    will yield

    {
        'hash_algorithm': md5,
        'given_hash': None,
        'calculated_hash': 343e249fdb0818a58edcc64663e1eb116843b4e1c4e74790ff331628593c02be,
        'fixity': True
    }

**Unknown Hashes Provided Example**:

.. code-block:: json

    {
        "unknown_hasher": 12345,
        "special_hasher": 1234567
    }

    will yield

    {
        'hash_algorithm': md5,
        'given_hash': None,
        'calculated_hash': 343e249fdb0818a58edcc64663e1eb116843b4e1c4e74790ff331628593c02be,
        'fixity': True
    }


Resource Upload Fixity
++++++++++++++++++++++

During the resource upload process, fixity is checked in two locations. First, when files are saved
to the disk from the request. Second, after files are uploaded to the target.

.. figure::  images/upload_process/upload_fixity.png
   :align:   center

   Image 1: Where in the upload process fixity is checked

Fixity Check 1
""""""""""""""
Resources must be included in the POST request in BagIt format as a zip file. After unzipping the
file and saving it to the server we validate the bag using BagIt's built in validator. If any files
saved don't match the manifest originally given then the fixity has failed and the server will return
an error.

Generate New Hashes If Necessary
""""""""""""""""""""""""""""""""
We now know that the currently saved files are the same as what the user sent forward. Before uploading
resources to the target we will make sure that there is a dictionary of hashes available generated by a hash algorithm
supported by the target. If the target supports a hash algorithm provided by the resource's 'bag'
then we will simply use those. If not, then we need to generate new hashes based on a target supported
hash algorithm.

Fixity Check 2
""""""""""""""
After resources are uploaded to the target, we compare the resources' hashes brought back from the
target to the hashes we captured before. If any hashes don't match then fixity fails. Since the
resources have already been uploaded we simply capture which resources' fixity fails and pass that
along the response payload along with the message, 'Upload successful but fixity failed'.

Resource Transfer Fixity
++++++++++++++++++++++++

Since the ``Transfer`` endpoint takes advantage of the ``Download`` and ``Upload`` endpoints, fixity
is checked using all methods already existing in those endpoints.

File Transfer Service (FTS) Metadata
------------------------------------

Preservation Quality
--------------------

Keyword Assignment
------------------
