# Docker Compose File for Development / Single Machine Deployments
# Creates an Nginx, Django, and Postgres container that work
# together.

version: "3"
services:
  presqt_nginx:
    depends_on:
      - presqt_django
    image: nginx:1.15
    networks:
      - frontend
    ports:
      # This ties host port 8000 to nginx container port 80
      # Inside of the nginx config, it's port 80 it forwarded to Django 8000
      # It is a little confusing.
      - 80:80
      - 443:443
    restart: always
    volumes:
      - ./config/ssl:/etc/ssl
      - ./config/nginx/conf.d/${ENVIRONMENT}_local.conf:/etc/nginx/conf.d/default.conf
      - ./config/nginx/snippets:/etc/nginx/snippets
      - presqt_ui_volume:/usr/src/app/ui
      - presqt_static_volume:/usr/src/app/staticfiles
      - presqt_media_volume:/usr/src/app/mediafiles

  # Create a Django container. Note that no secrets should
  # be stored within the container, but passed in via
  # environment variables.
  presqt_django:
    command: "/usr/src/app/docker/django_entrypoint.sh"
    build:
      context: .
      dockerfile: django.dockerfile

      # "Build Args" don't persist into the running
      # container, so we prefix them with BUILD to
      # make this clear.
      args:
        BUILD_ENVIRONMENT: ${ENVIRONMENT:-production}
    environment:
      CURATE_ND_TEST_TOKEN: $CURATE_ND_TEST_TOKEN
      GITHUB_TEST_USER_TOKEN: $GITHUB_TEST_USER_TOKEN
      GITLAB_TEST_USER_TOKEN: $GITLAB_TEST_USER_TOKEN
      GITLAB_UPLOAD_TEST_USER_TOKEN: $GITLAB_UPLOAD_TEST_USER_TOKEN
      OSF_TEST_USER_TOKEN: $OSF_TEST_USER_TOKEN
      OSF_PRIVATE_USER_TOKEN: $OSF_PRIVATE_USER_TOKEN
      OSF_UPLOAD_TEST_USER_TOKEN: $OSF_UPLOAD_TEST_USER_TOKEN
      OSF_PRESQT_FORK_TOKEN: $OSF_PRESQT_FORK_TOKEN
      ZENODO_TEST_USER_TOKEN: $ZENODO_TEST_USER_TOKEN
      SECRET_KEY: $SECRET_KEY
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DJANGO_SETTINGS_MODULE: config.settings.${ENVIRONMENT:-production}
    restart: always
    volumes:
      - .:/usr/src/app
      - presqt_static_volume:/usr/src/app/staticfiles
      - presqt_media_volume:/usr/src/app/mediafiles
    networks:
      - frontend
      - backend
  
  # Since only one service should be running
  # per container, we need something separate
  # to run scheduled jobs.
  presqt_cron:
    command: "/usr/src/app/docker/cron_startup.sh"
    restart: always
    depends_on:
      - presqt_django
    build:
      context: .
      dockerfile: django.dockerfile
      args:
        BUILD_ENVIRONMENT: ${ENVIRONMENT:-production}
    environment:
      CURATE_ND_TEST_TOKEN: $CURATE_ND_TEST_TOKEN
      GITHUB_TEST_USER_TOKEN: $GITHUB_TEST_USER_TOKEN
      GITLAB_TEST_USER_TOKEN: $GITLAB_TEST_USER_TOKEN
      GITLAB_UPLOAD_TEST_USER_TOKEN: $GITLAB_UPLOAD_TEST_USER_TOKEN
      OSF_TEST_USER_TOKEN: $OSF_TEST_USER_TOKEN
      OSF_PRIVATE_USER_TOKEN: $OSF_PRIVATE_USER_TOKEN
      OSF_UPLOAD_TEST_USER_TOKEN: $OSF_UPLOAD_TEST_USER_TOKEN
      OSF_PRESQT_FORK_TOKEN: $OSF_PRESQT_FORK_TOKEN
      ZENODO_TEST_USER_TOKEN: $ZENODO_TEST_USER_TOKEN
      SECRET_KEY: $SECRET_KEY
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DJANGO_SETTINGS_MODULE: config.settings.${ENVIRONMENT:-production}
    volumes:
      - .:/usr/src/app
      - presqt_static_volume:/usr/src/app/staticfiles
      - presqt_media_volume:/usr/src/app/mediafiles
    networks:
      - backend

# We create two top-level networks to provide some isolation
# of concerns / greater security. In our case, we use this to
# disallow direct connections between the NGINX container and
# the Postgres container.
networks:
  frontend:
  backend:

volumes:
  presqt_static_volume:
  presqt_media_volume:
  presqt_ui_volume:
